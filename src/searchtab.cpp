// DO NOT EDIT ** This file was generated by mugicpp ** DO NOT EDIT
#include "searchtab.h"
#include <QFont>
#include <QTextBrowser>
#include <QVBoxLayout>

bool isDarker(const QColor& color1, const QColor& color2) {
    double v1 = color1.valueF();
    double v2 = color2.valueF();
    return v1 < v2;
}

SearchTab::SearchTab(QWidget* parent) : QWidget(parent), mMode(Mode::Search) {

    QVBoxLayout* layout = new QVBoxLayout();
    mTextBrowser = new QTextBrowser();
#ifdef Q_OS_LINUX
    QFont font("Liberation Mono", 11, QFont::Normal);
    mTextBrowser->setFont(font);
#endif
#ifdef Q_OS_WIN
    QFont font("Courier New", 12, QFont::Normal);
    mTextBrowser->setFont(font);
#endif
    mTextBrowser->setOpenLinks(false);
    mDisplayOptionsWidget = new DisplayOptionsWidget();
    mRenderer = new SearchResultRenderer();

    //QColor color = this->palette().color(QPalette::Window);

    QColor baseColor = this->palette().color(QPalette::Base);

    QColor gray = QColor(128, 128, 128);

    bool darkMode = isDarker(baseColor, gray);

    mRenderer->setDarkMode(darkMode);
    mRenderer->setBaseColor(baseColor.name());

    layout->addWidget(mTextBrowser);
    layout->addWidget(mDisplayOptionsWidget);
    layout->setContentsMargins(0, 0, 0, 0);
    layout->setSpacing(0);
    setLayout(layout);
    mRenderer->setTab(this);
}
Mode SearchTab::mode() const {
    return mMode;
}
void SearchTab::setParams(const SearchParams& value) {
    mParams = value;
}
void SearchTab::setHits(const SearchHits& value) {
    mHits = value;
}
QTextBrowser* SearchTab::textBrowser() const {
    return mTextBrowser;
}
void SearchTab::setTextBrowser(QTextBrowser* value) {
    mTextBrowser = value;
}
DisplayOptionsWidget* SearchTab::displayOptionsWidget() const {
    return mDisplayOptionsWidget;
}
void SearchTab::setDisplayOptionsWidget(DisplayOptionsWidget* value) {
    mDisplayOptionsWidget = value;
}
SearchResultRenderer* SearchTab::renderer() const {
    return mRenderer;
}
void SearchTab::setRenderer(SearchResultRenderer* value) {
    mRenderer = value;
}
void SearchTab::append(const SearchHits& hits) {
    if (hits.isEmpty()) {
        return;
    }
    int size = mHits.size();
    mHits.append(hits);
    read();
    mRenderer->append(mHits.mid(size));
}
void SearchTab::read() {
    DisplayOptions options = mDisplayOptionsWidget->options();
    mHits.read(options.linesBefore(), options.linesAfter());
}
void SearchTab::trigRerender() {
    mDisplayOptionsWidget->trigChanged();
}
void SearchTab::setMode(Mode value) {
    if (mMode == value) {
        return;
    }
    mMode = value;
    trigRerender();
}
SearchParams& SearchTab::params() {
    return mParams;
}
SearchHits& SearchTab::hits() {
    return mHits;
}
DisplayOptions SearchTab::displayOptions() const {
    return mDisplayOptionsWidget->options();
}
void SearchTab::setDisplayOptions(const DisplayOptions& value) {
    mDisplayOptionsWidget->setOptions(value);
}
ReplaceParams SearchTab::replaceParams() {
    return mRenderer->replaceParams();
}
QString SearchTab::toPlainText() const {
    return mTextBrowser->toPlainText();
}
QString SearchTab::toHtml() const {
    return mTextBrowser->toHtml();
}
